##################################### yf_common_funcs.php ##########

------------------------------------------------------------------------------------------------------------
:::getmicrotime
***Returns time in seconds (with miliseconds as decimal digits) passed since 0:00:00 January 1, 1970 GMT
float getmicrotime()

------------------------------------------------------------------------------------------------------------
:::translate
***Returns translated string according to using in the framework locale language or input string if 
not found compilant locale string
string translate (string $string, [$args])
	$string - string to translate
	$args 	- ??? (optional)

Example: translate("Name"); //Returns "Èìÿ"

------------------------------------------------------------------------------------------------------------
:::t
***Alias for "translate"
string t(string $string, [$args])

------------------------------------------------------------------------------------------------------------
:::i18n
***Alias for "translate"
string i18n(string $string, [$args])

------------------------------------------------------------------------------------------------------------
:::show_text
***Format text for showing - replace underscores ("_") with spaces or show compilant text from DB
string show_text (string $text)
	$text - source text

Example: show_text("About_me"); //Returns "About me"

------------------------------------------------------------------------------------------------------------
:::error_back
***Returns html code of error message with "back"-button
string error_back ([string $where_go_back [, string $what_to_say]])
	$where_go_back 	- url of a page or javascript code where to go back (default value "javascript:history.back()")
	$what_to_say 	- error message text (default value "error")
------------------------------------------------------------------------------------------------------------
:::back
***Returns html code of a "back"-button
string back ([string $where_go_back [, string $what_to_say]])
	$where_go_back 	- url of a page or javascript code where to go back (default value "javascript:history.back()")
	$what_to_say 	- button inscription (default value "back")
------------------------------------------------------------------------------------------------------------
:::js_redirect
***Redirect using javascript //see [common] module
js_redirect ($location, $rewrite = true)
------------------------------------------------------------------------------------------------------------
:::redirect
***Redirect using Meta tags //see [common] module
redirect ($location, $rewrite = false, $text = "", $ttl = 3)
------------------------------------------------------------------------------------------------------------
:::js_alert
***Returns javascript alert popup window with <$text> in it
js_alert (string $text)
	$text - text that appears in alert window
------------------------------------------------------------------------------------------------------------
:::generate_password
***Returns unique password 
string generate_password(int $Length)
	$Length - password string length (max 32 symbols)
------------------------------------------------------------------------------------------------------------
:::process_url
***Returns URL adapted fo rewrite mode
string process_url(string $url [, bool $force_rewrite])
	$url - url to process
	$force_rewrite - if "true" makes rewrite in all cases, even if rewrite mode is turned off (default value "false") 
------------------------------------------------------------------------------------------------------------
:::highlight
***Highlight given text (case-insensetive). If <$what> parameter is missed returns source text (<$where>) 
string highlight (string $where, string $what)
	$where	- a string where need to highlight some text
	$what 	- text to highlight
------------------------------------------------------------------------------------------------------------
:::text_filter
***Filter text for specified symbols or words. Words that must be filtered are stored in DB.
Returns filtered text (words that must be filtered replaces with empty string)
string text_filter (string $str)
	$str - text to filter
------------------------------------------------------------------------------------------------------------
:::_check_words_length ???
***Function to prevent creation VERY long words (without spaces inside)
_check_words_length ($text, $length = 0, $do_encode_email = false)
------------------------------------------------------------------------------------------------------------
:::_prepare_html
***Returns formatted text. Replace symbols like "{", "}" with their hex-codes, strip slashes if needed, prepare 
html special chars
??? locale_tr ???                                     
string _prepare_html (string $text, bool $need_strip_slashes, bool $use_smart_function)
	$text 				- text to format
	$need_strip_slashes - "true" if need to strip slashes (default value "true")
	$use_smart_function - "true" if need to use smart_htmlspecialchars() function
------------------------------------------------------------------------------------------------------------
:::_filter_text ???
***Do filter text from unwanted sequences of symbols
_filter_text ($body, $length = 0)
------------------------------------------------------------------------------------------------------------
:::_show_avatar
***Returns html code of user avatar block
string _show_avatar (int $user_id [, string $user_name [, bool $as_link [, bool $is_middle [, bool $only_img_src [, string $force_link]]]]])
	$user_id		- id of user whose avatar need to show
	$user_name		- name of the avatar's owner (default value - empty string)
	$as_link		- if "true" image shows as a link to user profile (default value "false")
	$is_middle		- if "true" shows middlesize image filename in a path (default value "false")
	$only_img_src	- if "true" returns only web path to image (default value "false")
	$force_link		- if set image becomes a link to the <$force_link> location, not to user profile (default value - empty string)
------------------------------------------------------------------------------------------------------------
:::_avatar_exists
***Returns "true" if avatar image file exists, "false" if not
bool _avatar_exists (int $user_id [, bool $is_middle])
	$user_id	- id of user whose avatar need to check
	$is_middle 	- if "true" check for middle image size exists (default value "false")
------------------------------------------------------------------------------------------------------------
:::_get_age_from_birth
***Returns user's age from birthday date
int _get_age_from_birth (date $birth_date)
	$birth_date - date of birth in format "YYYY-MM-DD"
------------------------------------------------------------------------------------------------------------
:::_display_name
***Display user nick name (or name before all nicks will not be transfered)
string _display_name (array $user_info)
	$user_info - array of userinfo (from 'user' dbtable)
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
------------------------------------------------------------------------------------------------------------
:::
***
