<?php

class yf_core_css {

// TODO: auto-caching into web-accessible dir with locking (to avoid duplicate cache entry attempts)
// TODO: debug console block

	public $content = array();
	/** @array List of pre-defined assets */
	public $assets = array(
// TODO: add support for sub-arrays and params
		'jquery-ui'	=> '//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.4/css/jquery-ui.min.css',
		'angular-ui'=> '//cdnjs.cloudflare.com/ajax/libs/angular-ui/0.4.0/angular-ui.min.css',
		'bs2'		=> '//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css',
		'bs3'		=> '//netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap.min.css',
	);

	/**
	* Main method to display overall CSS. Can be called from main 
	* like this: {execute_shutdown(core_css,show)} or {execute_shutdown(graphics,show_css)}
	*/
	public function show($params = array()) {
		// Main CSS from theme stpl
		$main_style_css = trim(tpl()->parse_if_exists('style_css'));
		// single string = automatically generated by compass
		if (strpos($main_style_css, "\n") === false && strlen($main_style_css) && preg_match('~^css/style.css\?[0-9]{10}$~ims', $main_style_css)) {
			$this->add_url(WEB_PATH. tpl()->TPL_PATH. $main_style_css);
		} else {
			$this->add_raw($main_style_css);
		}
		// CSS from current module
		$module_css_path = $this->_find_module_css($_GET['object']);
		if ($module_css_path) {
			$this->add_file($module_css_path);
		}
		$out = array();
		// Process previously added content, depending on its type
		foreach ((array)$this->content as $md5 => $v) {
			$type = $v['type'];
			$text = $v['text'];
			if ($type == 'url') {
				$out[$md5] = '<link href="'._prepare_html($text).'" rel="stylesheet" />';
			} elseif ($type == 'file') {
				$out[$md5] = '<style type="text/css">'. PHP_EOL. file_get_contents($text). PHP_EOL. '</style>';
			} elseif ($type == 'inline') {
				$text = $this->_strip_style_tags($text);
				$out[$md5] = '<style type="text/css">'. PHP_EOL. $text. PHP_EOL. '</style>';
			} elseif ($type == 'raw') {
				$out[$md5] = $text;
			}
		}
		return implode(PHP_EOL, $out);
	}

	/**
	* Alias
	*/
	public function show_css($params = array()) {
		return $this->show($params);
	}
	
	/**
	* $content: string/array
	* $type: = auto|asset|url|file|inline
	*/
	public function add($content, $type = 'auto', $params = array()) {
		if ($type === true) {
			$type = 'file';
		}
		if (!is_array($content)) {
			$content = array($content);
		}
		foreach ($content as $_content) {
			$_content = trim($_content);
			$_type = $type;
			if (!$type || $type == 'auto') {
				$_type = $this->_detect_content($_content);
			}
			if ($type == 'url') {
				$this->add_url($_content, $params);
			} elseif ($type == 'file') {
				$this->add_file($_content, $params);
			} elseif ($type == 'inline') {
				$this->add_inline($_content, $params);
			} elseif ($type == 'asset') {
				$this->add_url($this->assets[$_content], $params);
			}
		}
	}

	/**
	*/
	public function add_url($urls, $params = array()) {
		if (!is_array($urls)) {
			$urls = array($urls);
		}
		foreach ((array)$urls as $url) {
			$path = trim($url);
			if (!strlen($url)) {
				continue;
			}
			$md5 = md5($url);
			$this->content[$md5] = array(
				'type'	=> 'url',
				'text'	=> $url,
			);
		}
	}

	/**
	*/
	public function add_file($paths, $params = array()) {
		if (!is_array($paths)) {
			$paths = array($paths);
		}
		foreach ((array)$paths as $path) {
			$path = trim($path);
			if (!strlen($path)) {
				continue;
			}
			if (!file_exists($path)) {
				continue;
			}
			$text = file_get_contents($path);
			if (!strlen($text)) {
				continue;
			}
			$md5 = md5($path);
			$this->content[$md5] = array(
				'type'	=> 'file',
				'text'	=> $path,
			);
		}
	}

	/**
	*/
	public function add_inline($texts, $params = array()) {
		if (!is_array($texts)) {
			$texts = array($texts);
		}
		foreach ((array)$texts as $text) {
			if (!strlen($text)) {
				continue;
			}
			$md5 = md5($text);
			$this->content[$md5] = array(
				'type'	=> 'inline',
				'text'	=> $text,
			);
		}
	}

	/**
	*/
	public function add_raw($texts, $params = array()) {
		if (!is_array($texts)) {
			$texts = array($texts);
		}
		foreach ((array)$texts as $text) {
			if (!strlen($text)) {
				continue;
			}
			$md5 = md5($text);
			$this->content[$md5] = array(
				'type'	=> 'raw',
				'text'	=> $text,
			);
		}
	}

	/**
	*/
	public function _find_module_css($module = '') {
		if (!$module) {
			$module = $_GET['object'];
		}
		$stpl_path = $module.'/'.$module.'.css';
		$paths = array(
			MAIN_TYPE_ADMIN ? YF_PATH. 'templates/admin/'.$stpl_path : '',
			YF_PATH. 'templates/user/'.$stpl_path,
			MAIN_TYPE_ADMIN ? YF_PATH. 'plugins/'.$module.'/templates/admin/'.$stpl_path : '',
			YF_PATH. 'plugins/'.$module.'/templates/user/'.$stpl_path,
			MAIN_TYPE_ADMIN ? PROJECT_PATH. 'templates/admin/'.$stpl_path : '',
			PROJECT_PATH. 'templates/user/'.$stpl_path,
			SITE_PATH != PROJECT_PATH ? SITE_PATH. 'templates/user/'.$stpl_path : '',
		);
		$found = '';
		foreach (array_reverse($paths, true) as $path) {
			if (!strlen($path)) {
				continue;
			}
			if (file_exists($path)) {
				$found = $path;
				break;
			}
		}
		return $found;
	}
	
	/**
	*/
	public function _detect_content($content = '') {
		$content = trim($content);
		$type = false;
// TODO: domain.com/style.css
// TODO: /style.css
// TODO: style.css
		if (isset($this->assets[$content])) {
			$type = 'asset';
		} elseif (preg_match('~^(http://|https://|//)[a-z0-9]+~ims', $content)) {
			$type = 'url';
		} elseif (preg_match('~^(<style|[$;#\.@/\*])~ims', $content) || strpos($content, PHP_EOL) !== false) {
			$type = 'inline';
// TODO: file allowed to begin with PROJECT_PATH, SITE_PATH or YF_PATH
		} elseif (preg_match('~^/[a-z0-9\./_-]+\.css$~ims', $content) && file_exists($content)) {
			$type = 'file';
		}
		return $type;
	}

	/**
	*/
	public function _strip_style_tags ($text) {
// TODO: add support for extracting url from <link rel="stylesheet" href="path.to/style.css">
		for ($i = 0; $i < 10; $i++) {
			if (strpos($text, 'style') === false) {
				break;
			}
			$text = preg_replace('~^<style[^>]*?>~ims', '', $text);
			$text = preg_replace('~</style>$~ims', '', $text);
		}
		return $text;
	}
}
